package com.divinity.hmedia.rgrbillionaire.ability;

import com.divinity.hmedia.rgrbillionaire.cap.BillionaireHolderAttacher;
import com.divinity.hmedia.rgrbillionaire.quest.goal.LootDesertTempleGoal;
import com.divinity.hmedia.rgrbillionaire.quest.goal.StealMoneyGoal;
import com.divinity.hmedia.rgrbillionaire.util.BillionaireUtils;
import dev._100media.hundredmediaabilities.ability.Ability;
import dev._100media.hundredmediaabilities.capability.AbilityHolderAttacher;
import dev._100media.hundredmediaquests.cap.QuestHolderAttacher;
import net.minecraft.core.particles.DustParticleOptions;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.phys.Vec3;
import org.joml.Vector3f;

import java.util.List;

public class ExploitWorkingClassAbility extends Ability {

    private static final MobEffectInstance WEAKNESS = new MobEffectInstance(MobEffects.WEAKNESS, 60, 0);
    public static final DustParticleOptions RED = new DustParticleOptions(DustParticleOptions.REDSTONE_PARTICLE_COLOR, 1.2F);
    private static final DustParticleOptions YELLOW = new DustParticleOptions(new Vector3f(Vec3.fromRGB24(14737920).toVector3f()), 1.2F);
    private static final DustParticleOptions ORANGE = new DustParticleOptions(new Vector3f(Vec3.fromRGB24(16753920).toVector3f()), 1.2F);

    @Override
    public void executePressed(ServerLevel level, ServerPlayer player) {
        super.executePressed(level, player);
    }

    @Override
    public void executeHeld(ServerLevel level, ServerPlayer player, int tick) {
        super.executeHeld(level, player, tick);
        if (BillionaireUtils.hasEnoughMoney(player, 25)) {
            if (tick % 5 == 0) {
                BillionaireUtils.createHelix(RED, player, level, 6);
            }
            if (tick % 20 == 0) {
                var holder = BillionaireHolderAttacher.getHolderUnwrap(player);
                if (holder != null) {
                    holder.addMoney(-25);
                    List<LivingEntity> entities = level.getEntitiesOfClass(LivingEntity.class, player.getBoundingBox().inflate(10), e -> e != player && e.distanceToSqr(player) <= 6 * 6);
                    for (LivingEntity entity : entities) {
                        if (!entity.hasEffect(MobEffects.WEAKNESS)) {
                            entity.addEffect(WEAKNESS);
                        }
                        entity.hurt(player.damageSources().generic(), 1);
                        player.heal(1);
                    }
                    int amount = entities.stream().filter(Entity::isAlive).mapToInt(m -> 1).sum() * 50;
                    holder.addMoney(amount);
                    QuestHolderAttacher.checkAllGoals(player, goal -> {
                        if (goal instanceof StealMoneyGoal moneyGoal) {
                            moneyGoal.addProgress(amount);
                            return true;
                        }
                        return false;
                    });
                }
            }
        }
        else AbilityHolderAttacher.getAbilityHolder(player).ifPresent(h -> h.removeActiveAbility(this, true));
    }

    @Override
    public boolean isToggleAbility() {
        return true;
    }
}
